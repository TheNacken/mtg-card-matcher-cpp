name: Android CMake Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-18.04
    env:
      ANDROID_NDK_VERSION: "24.0.8215888"
      ANDROID_CMAKE_VERSION: "3.18.1"
      ANDROID_API_LEVEL: "29"
      ANDROID_ABI: "arm64-v8a"
      CMAKE_BUILD_TYPE: "Release"
      OPENBLAS_TAG: "v0.3.21"
      FAISS_TAG: "v1.7.2"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk openjdk-17-jre cmake ninja-build git build-essential libtbb-dev libomp-dev unzip wget python3

      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: /home/runner/android-sdk
          key: android-sdk-${{ env.ANDROID_NDK_VERSION }}-${{ env.ANDROID_CMAKE_VERSION }}-${{ env.ANDROID_API_LEVEL }}
          restore-keys: |
            android-sdk-${{ env.ANDROID_NDK_VERSION }}-${{ env.ANDROID_CMAKE_VERSION }}-
            android-sdk-${{ env.ANDROID_NDK_VERSION }}-

      - name: Prepare Android SDK (commandline tools) and install packages
        run: |
          set -euo pipefail
          SDK_ROOT="$HOME/android-sdk"
          echo "SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "NDK_ROOT=$SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV
          echo "CMAKE_BIN=$SDK_ROOT/cmake/${{ env.ANDROID_CMAKE_VERSION }}/bin/cmake" >> $GITHUB_ENV
          echo "NINJA_BIN=$SDK_ROOT/cmake/${{ env.ANDROID_CMAKE_VERSION }}/bin/ninja" >> $GITHUB_ENV
          
          # Check if SDK is already cached
          if [ -d "$SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}" ] && [ -d "$SDK_ROOT/cmake/${{ env.ANDROID_CMAKE_VERSION }}" ]; then
            echo "Android SDK found in cache, skipping download"
            export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          else
            echo "Android SDK not in cache, downloading..."
            mkdir -p "$SDK_ROOT"
            cd "$SDK_ROOT"
            CLI_ZIP="commandlinetools-linux_latest.zip"
            # official commandline tools (file name may be updated over time)
            wget -q -O ${CLI_ZIP} https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
            unzip -q ${CLI_ZIP} -d "$SDK_ROOT/cmdline-tools-temp"
            mkdir -p "$SDK_ROOT/cmdline-tools/latest"
            mv "$SDK_ROOT/cmdline-tools-temp/cmdline-tools/"* "$SDK_ROOT/cmdline-tools/latest/"
            rm -rf "$SDK_ROOT/cmdline-tools-temp" ${CLI_ZIP}
            export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"
            # accept licenses (ignore the benign broken-pipe from 'yes')
            yes | sdkmanager --sdk_root="$SDK_ROOT" --licenses >/dev/null || true
            sdkmanager --sdk_root="$SDK_ROOT" "platform-tools" "platforms;android-30" "cmake;${{ env.ANDROID_CMAKE_VERSION }}" "ndk;${{ env.ANDROID_NDK_VERSION }}" "build-tools;33.0.0"
          fi

      - name: Cache HDF5
        uses: actions/cache@v3
        with:
          path: /home/runner/hdf5-install
          key: hdf5-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-v1
          restore-keys: |
            hdf5-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-
            hdf5-${{ runner.os }}-${{ env.ANDROID_ABI }}-

      - name: Clone and build HDF5
        run: |
          set -euo pipefail
          
          # Check if HDF5 is already cached
          if [ -d "$HOME/hdf5-install" ] && [ -f "$HOME/hdf5-install/lib/libhdf5.a" ]; then
            echo "HDF5 found in cache, skipping build"
            exit 0
          fi
          
          echo "HDF5 not in cache, building..."
          git clone --depth 1 https://github.com/HDFGroup/hdf5.git
          cd hdf5
          mkdir -p build-android && cd build-android
          cmake .. \
           -DCMAKE_INSTALL_PREFIX=$HOME/hdf5-install \
           -DBUILD_SHARED_LIBS=OFF \
           -DBUILD_TESTING=OFF \
           -DHDF5_BUILD_CPP_LIB=ON \
           -DHDF5_ENABLE_CXX=ON \
           -DHDF5_BUILD_TOOLS=OFF \
           -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
           -DANDROID_ABI=$ANDROID_ABI \
           -DANDROID_PLATFORM=android-${ANDROID_API_LEVEL} \
           -DCMAKE_C_COMPILER=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/clang \
           -DCMAKE_CXX_COMPILER=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ \
           -DCMAKE_SYSROOT=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
           -DCMAKE_INSTALL_LIBDIR=lib \
           -GNinja
          ninja install
          # debug: list installed files so we can see where the CMake config files live
          echo "::group::HDF5 install listing"
          find $HOME/hdf5-install -maxdepth 4 -type f -print || true
          echo "::endgroup::"
          echo "=== list hdf5-install top-level ==="
          ls -la $HOME/hdf5-install || true

          echo "=== locate any lib files ==="
          find $HOME/hdf5-install -type f -name "libhdf5*" -o -name "libhdf5*.a" -o -name "libhdf5*.so" -print || true

          echo "=== locate any cmake config files ==="
          find $HOME/hdf5-install -type f -name "*HDF5*Config.cmake" -o -name "hdf5-config.cmake" -print || true

          echo "=== full tree (trim to 4 levels) ==="
          find $HOME/hdf5-install -maxdepth 4 -type d -print

      - name: Cache HDF5 immediately after build
        if: success()
        uses: actions/cache/save@v3
        with:
          path: /home/runner/hdf5-install
          key: hdf5-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-${{ github.run_id }}

      - name: Cache OpenCV
        uses: actions/cache@v3
        with:
          path: /home/runner/opencv-install
          key: opencv-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-${{ env.CMAKE_BUILD_TYPE }}-v2
          restore-keys: |
            opencv-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-${{ env.CMAKE_BUILD_TYPE }}-
            opencv-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-
            opencv-${{ runner.os }}-${{ env.ANDROID_ABI }}-

      - name: Clone and build OpenCV
        run: |
          set -euo pipefail
          
          # Check if OpenCV is already cached
          if [ -d "$HOME/opencv-install" ] && [ -f "$HOME/opencv-install/sdk/native/jni/OpenCVConfig.cmake" ]; then
            echo "OpenCV found in cache, skipping build"
            exit 0
          fi
          
          echo "OpenCV not in cache, building..."
          git clone --depth 1 https://github.com/opencv/opencv.git
          git clone --depth 1 https://github.com/opencv/opencv_contrib.git
          cd opencv
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$HOME/opencv-install \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TESTS=OFF \
            -DBUILD_PERF_TESTS=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_opencv_python=OFF \
            -DWITH_OPENMP=ON \
            -DWITH_TBB=ON \
            -DWITH_IPP=ON \
            -DWITH_OPENCL=OFF \
            -DOPENCV_GENERATE_PKGCONFIG=ON \
            -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
            -DOPENCV_ENABLE_NONFREE=ON \
            -DBUILD_opencv_wechat_qrcode=OFF \
            -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=android-${ANDROID_API_LEVEL} \
            -GNinja
          ninja install

      - name: Cache OpenCV immediately after build
        if: success()
        uses: actions/cache/save@v3
        with:
          path: /home/runner/opencv-install
          key: opencv-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-${{ env.CMAKE_BUILD_TYPE }}-${{ github.run_id }}

      - name: Cache OpenBLAS and FAISS
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/faiss_openblas_work
            /home/runner/faiss-install
          key: openblas-faiss-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.OPENBLAS_TAG }}-${{ env.FAISS_TAG }}-v1
          restore-keys: |
            faiss-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.FAISS_TAG }}-
            openblas-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.OPENBLAS_TAG }}-
            openblas-faiss-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.OPENBLAS_TAG }}-
            openblas-faiss-${{ runner.os }}-${{ env.ANDROID_ABI }}-

      - name: Build OpenBLAS (per script)
        env:
          SDK_ROOT: ${{ env.SDK_ROOT }}
          NDK_ROOT: ${{ env.NDK_ROOT }}
          NINJA_BIN: ${{ env.NINJA_BIN }}
          ANDROID_ABI: ${{ env.ANDROID_ABI }}
          ANDROID_PLATFORM: ${{ env.ANDROID_API_LEVEL }}
          OPENBLAS_TAG: ${{ env.OPENBLAS_TAG }}
        run: |
          set -euo pipefail
          WORK_DIR="$HOME/faiss_openblas_work"
          BUILD_DIR="$WORK_DIR/build"
          build_subdir="$BUILD_DIR/openblas_${ANDROID_ABI}"
          
          # Check if OpenBLAS is already cached
          if [ -f "$build_subdir/lib/libopenblas.a" ]; then
            echo "OpenBLAS found in cache, skipping build"
            echo "$build_subdir/lib/libopenblas.a" > "$WORK_DIR/openblas_lib_path.txt"
            exit 0
          fi
          
          echo "OpenBLAS not in cache, building..."
          SCRIPT_DIR="$PWD"
          SRC_DIR="$WORK_DIR/src"
          mkdir -p "$SRC_DIR" "$BUILD_DIR"
          cd "$SRC_DIR"
          # clone OpenBLAS (same branch/tag as script)
          if [ ! -d "$SRC_DIR/OpenBLAS" ]; then
            git clone --recursive -b "$OPENBLAS_TAG" https://github.com/xianyi/OpenBLAS.git OpenBLAS
          fi
          # build OpenBLAS for the ABI (cmake args are the same as in the original script)
          mkdir -p "$build_subdir"
          pushd "$build_subdir"
          echo "Configuring OpenBLAS (ABI=${ANDROID_ABI})"
          "$CMAKE_BIN" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${NDK_ROOT}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_NDK=${NDK_ROOT} \
            -DANDROID_PLATFORM=android-${ANDROID_PLATFORM} \
            -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
            -DCMAKE_ANDROID_NDK=${NDK_ROOT} \
            -DCMAKE_MAKE_PROGRAM=${NINJA_BIN} \
            -DCMAKE_SYSTEM_NAME=Android \
            -DCMAKE_SYSTEM_VERSION=${ANDROID_PLATFORM} \
            -DANDROID_STL=c++_static \
            -DCMAKE_CXX_FLAGS_RELEASE="-s" \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_SHARED_LIBS=OFF \
            -GNinja \
            "$SRC_DIR/OpenBLAS"
          ${NINJA_BIN}
          popd
          echo "::group::OpenBLAS build output"
          ls -la "$BUILD_DIR/openblas_${ANDROID_ABI}" || true
          echo "::endgroup::"
          # expose the lib path for subsequent steps via a marker file
          echo "$BUILD_DIR/openblas_${ANDROID_ABI}/lib/libopenblas.a" > "$WORK_DIR/openblas_lib_path.txt"
          echo "OpenBLAS lib path recorded to $WORK_DIR/openblas_lib_path.txt"

      - name: Cache OpenBLAS immediately after build
        if: success()
        uses: actions/cache/save@v3
        with:
          path: /home/runner/faiss_openblas_work
          key: openblas-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.OPENBLAS_TAG }}-${{ github.run_id }}

      - name: Build FAISS (per script)
        env:
          SDK_ROOT: ${{ env.SDK_ROOT }}
          NDK_ROOT: ${{ env.NDK_ROOT }}
          NINJA_BIN: ${{ env.NINJA_BIN }}
          ANDROID_ABI: ${{ env.ANDROID_ABI }}
          ANDROID_PLATFORM: ${{ env.ANDROID_API_LEVEL }}
          FAISS_TAG: ${{ env.FAISS_TAG }}
        run: |
          set -euo pipefail
          WORK_DIR="$HOME/faiss_openblas_work"
          
          # Check if FAISS is already cached
          if [ -d "$HOME/faiss-install" ] && [ -f "$HOME/faiss-install/libfaiss.so" ]; then
            echo "FAISS found in cache, skipping build"
            exit 0
          fi
          
          echo "FAISS not in cache, building..."
          SRC_DIR="$WORK_DIR/src"
          BUILD_DIR="$WORK_DIR/build"
          mkdir -p "$SRC_DIR" "$BUILD_DIR"
          cd "$SRC_DIR"
          # clone faiss (same branch/tag as script)
          if [ ! -d "$SRC_DIR/faiss" ]; then
            git clone --recursive -b "$FAISS_TAG" https://github.com/facebookresearch/faiss.git faiss
          fi
          # read openblas lib path written by previous step
          OPENBLAS_LIB_PATH="$(cat $WORK_DIR/openblas_lib_path.txt || true)"
          if [ -z "$OPENBLAS_LIB_PATH" ]; then
            echo "ERROR: openblas lib path not found (expected $WORK_DIR/openblas_lib_path.txt)"
            exit 1
          fi
          # configure and build FAISS with the same cmake args as the script (note: we pass MKL_LIBRARIES as in the script)
          abi_build_dir="$BUILD_DIR/faiss_${ANDROID_ABI}"
          mkdir -p "$abi_build_dir"
          pushd "$abi_build_dir"
          echo "Configuring FAISS (ABI=${ANDROID_ABI})"
          "$CMAKE_BIN" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${NDK_ROOT}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_NDK=${NDK_ROOT} \
            -DANDROID_PLATFORM=android-${ANDROID_PLATFORM} \
            -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
            -DCMAKE_ANDROID_NDK=${NDK_ROOT} \
            -DCMAKE_MAKE_PROGRAM=${NINJA_BIN} \
            -DCMAKE_SYSTEM_NAME=Android \
            -DCMAKE_SYSTEM_VERSION=${ANDROID_PLATFORM} \
            -DANDROID_STL=c++_static \
            -DFAISS_ENABLE_GPU=OFF \
            -DFAISS_ENABLE_PYTHON=OFF \
            -DBUILD_TESTING=OFF \
            -DBUILD_SHARED_LIBS=ON \
            -DBLA_VENDOR=OpenBLAS \
            -DMKL_LIBRARIES=${OPENBLAS_LIB_PATH} \
            -DCMAKE_CXX_FLAGS_RELEASE="-s" \
            -GNinja \
            "$SRC_DIR/faiss"
          ${NINJA_BIN}
          popd
          echo "::group::FAISS build output"
          ls -la "$BUILD_DIR/faiss_${ANDROID_ABI}" || true
          echo "::endgroup::"
          # install into a faiss-install dir similar to script expectations
          mkdir -p $HOME/faiss-install
          # try to find libfaiss.so or libs under build tree and copy to install dir
          find "$BUILD_DIR/faiss_${ANDROID_ABI}" -type f -name "libfaiss*" -exec cp -v {} $HOME/faiss-install/ \; || true
          echo "FAISS artifacts copied (if present) to $HOME/faiss-install"

      - name: Cache FAISS immediately after build
        if: success()
        uses: actions/cache/save@v3
        with:
          path: |
            /home/runner/faiss_openblas_work
            /home/runner/faiss-install
          key: faiss-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.FAISS_TAG }}-${{ github.run_id }}

      - name: Verify OpenBLAS library exists
        run: |
          WORK_DIR="$HOME/faiss_openblas_work"
          
          # Try to get the path from the marker file first
          OPENBLAS_LIB_PATH="$(cat $WORK_DIR/openblas_lib_path.txt 2>/dev/null || true)"
          
          # If not found in marker file, try to find it in the expected location
          if [ -z "$OPENBLAS_LIB_PATH" ]; then
            OPENBLAS_LIB_PATH="$WORK_DIR/build/openblas_${ANDROID_ABI}/lib/libopenblas.a"
            echo "$OPENBLAS_LIB_PATH" > "$WORK_DIR/openblas_lib_path.txt"
          fi
          
          if [ ! -f "$OPENBLAS_LIB_PATH" ]; then
            echo "::error::Required OpenBLAS static library not found at $OPENBLAS_LIB_PATH"
            echo "Searching for OpenBLAS libraries..."
            find "$WORK_DIR" -name "libopenblas*" -type f 2>/dev/null || true
            ls -al "$(dirname "$OPENBLAS_LIB_PATH")" 2>/dev/null || true
            exit 1
          fi
          echo "Found OpenBLAS: $OPENBLAS_LIB_PATH"

      - name: Configure and build project (final)
        run: |
          mkdir -p build && cd build
          cmake .. \
           -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
           -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
           -DANDROID_ABI=$ANDROID_ABI \
           -DANDROID_PLATFORM=android-${ANDROID_API_LEVEL} \
           -DOpenCV_DIR=$HOME/opencv-install/sdk/native/jni \
           -DFAISS_ROOT=$HOME/faiss-install \
           -DCMAKE_PREFIX_PATH=$HOME/hdf5-install \
           -DHDF5_ROOT=$HOME/hdf5-install \
           -DHDF5_DIR=$HOME/hdf5-install/lib/cmake/hdf5 \
           -DHDF5_USE_STATIC_LIBRARIES=ON \
           -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON \
           -GNinja
          ninja


      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build-output
          path: build/

