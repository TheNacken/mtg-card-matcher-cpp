name: Android CMake Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cache HDF5 build
      - name: Cache HDF5
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/hdf5-install
          key: hdf5-${{ runner.os }}-${{ hashFiles('hdf5/**', '.github/workflows/android-build.yml') }}
          restore-keys: |
            hdf5-${{ runner.os }}-

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build git build-essential libtbb-dev libomp-dev unzip wget libopenblas-dev

      - name: Set environment variables
        run: |
          echo "ANDROID_NDK_VERSION=25.1.8937393" >> $GITHUB_ENV
          echo "CMAKE_BUILD_TYPE=Release" >> $GITHUB_ENV
          echo "HOME_DIR=$HOME" >> $GITHUB_ENV

      - name: Download and extract Android NDK
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip android-ndk-r25b-linux.zip -d $HOME
          mv $HOME/android-ndk-r25b $HOME/android-ndk


      - name: Clone and build HDF5
        run: |
          git clone --depth 1 https://github.com/HDFGroup/hdf5.git
          cd hdf5
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=$HOME/hdf5-install \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TESTING=OFF \
            -DCMAKE_TOOLCHAIN_FILE=$HOME/android-ndk/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -GNinja
          ninja install

      # Cache OpenCV build
      - name: Cache OpenCV
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/opencv-install
          key: opencv-${{ runner.os }}-${{ hashFiles('opencv/**', 'opencv_contrib/**', '.github/workflows/android-build.yml') }}
          restore-keys: |
            opencv-${{ runner.os }}-


      - name: Clone and build OpenCV
        run: |
          git clone --depth 1 https://github.com/opencv/opencv.git
          git clone --depth 1 https://github.com/opencv/opencv_contrib.git
          cd opencv
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$HOME/opencv-install \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TESTS=OFF \
            -DBUILD_PERF_TESTS=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_opencv_python=OFF \
            -DWITH_OPENMP=ON \
            -DWITH_TBB=ON \
            -DWITH_IPP=ON \
            -DWITH_OPENCL=OFF \
            -DOPENCV_GENERATE_PKGCONFIG=ON \
            -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
            -DOPENCV_ENABLE_NONFREE=ON \
            -DBUILD_opencv_wechat_qrcode=OFF \
            -DCMAKE_TOOLCHAIN_FILE=$HOME/android-ndk/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -GNinja
          ninja install

      # Cache OpenBLAS build
      - name: Cache OpenBLAS
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/openblas-install
          key: openblas-${{ runner.os }}-${{ hashFiles('OpenBLAS/**', '.github/workflows/android-build.yml') }}
          restore-keys: |
            openblas-${{ runner.os }}-
          

      - name: Clone and build OpenBLAS for Android
        run: |
          git clone --depth 1 --branch v0.3.28 https://github.com/xianyi/OpenBLAS.git
          cd OpenBLAS
          export PATH=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          make TARGET=ARMV8 ONLY_CBLAS=1 \
            CC=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang \
            HOSTCC=gcc \
            AR=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar \
            RANLIB=echo \
            -j$(nproc)
          make install PREFIX=$HOME/openblas-install
          ls -R $HOME/openblas-install

      # Cache FAISS build
      - name: Cache FAISS
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/faiss-install
          key: faiss-${{ runner.os }}-${{ hashFiles('faiss/**', '.github/workflows/android-build.yml') }}
          restore-keys: |
            faiss-${{ runner.os }}-


      - name: Clone and build FAISS
        run: |
          git clone --depth 1 https://github.com/facebookresearch/faiss.git
          cd faiss
          mkdir -p build-android && cd build-android
          cmake .. \
            -DFAISS_ENABLE_GPU=OFF \
            -DFAISS_ENABLE_PYTHON=OFF \
            -DFAISS_ENABLE_TESTS=OFF \
            -DFAISS_ENABLE_BENCHMARKS=OFF \
            -DBUILD_TESTING=OFF \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_INSTALL_PREFIX=$HOME/faiss-install \
            -DCMAKE_TOOLCHAIN_FILE=$HOME/android-ndk/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -GNinja
          ninja install

      - name: Configure and build project
        run: |
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
            -DCMAKE_TOOLCHAIN_FILE=$HOME/android-ndk/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -DOpenCV_DIR=$HOME/opencv-install/sdk/native/jni \
            -DFAISS_ROOT=$HOME/faiss-install \
            -DCMAKE_PREFIX_PATH=$HOME/hdf5-install \
            -GNinja
   
          ninja

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build-output
          path: build/
