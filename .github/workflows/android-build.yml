name: Android CMake Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_NDK_VERSION: "24.0.8215888"  # used to pick the NDK we install
      ANDROID_CMAKE_VERSION: "3.18.1"
      ANDROID_API_LEVEL: "21"
      ANDROID_ABI: "arm64-v8a"
      CMAKE_BUILD_TYPE: "Release"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache HDF5
        uses: actions/cache@v3
        with:
          path: /home/runner/hdf5-install
          key: hdf5-${{ runner.os }}-v1
          restore-keys: |
            hdf5-${{ runner.os }}-v1

      - name: Install prerequisites
        run: |
          sudo apt-get update
          # Note: gfortran intentionally removed; Android NDK does not provide a Fortran cross-compiler
          sudo apt-get install -y cmake ninja-build git build-essential libtbb-dev libomp-dev unzip wget python3

      - name: Prepare Android SDK (commandline tools) and install packages
        run: |
          set -euo pipefail
          export SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"
          # Download Android commandline tools
          CLI_ZIP="commandlinetools-linux_latest.zip"
          wget -q -O ${CLI_ZIP} https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q ${CLI_ZIP} -d "$SDK_ROOT/cmdline-tools-temp"
          mkdir -p "$SDK_ROOT/cmdline-tools/latest"
          mv "$SDK_ROOT/cmdline-tools-temp/cmdline-tools/"* "$SDK_ROOT/cmdline-tools/latest/"
          rm -rf "$SDK_ROOT/cmdline-tools-temp" ${CLI_ZIP}
          export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --sdk_root="$SDK_ROOT" --licenses >/dev/null
          sdkmanager --sdk_root="$SDK_ROOT" "platform-tools" "platforms;android-30" "cmake;${{ env.ANDROID_CMAKE_VERSION }}" "ndk;${{ env.ANDROID_NDK_VERSION }}" "build-tools;33.0.0"
          echo "SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "NDK_ROOT=$SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV
          echo "CMAKE_BIN=$SDK_ROOT/cmake/${{ env.ANDROID_CMAKE_VERSION }}/bin/cmake" >> $GITHUB_ENV
          echo "NINJA_BIN=$SDK_ROOT/cmake/${{ env.ANDROID_CMAKE_VERSION }}/bin/ninja" >> $GITHUB_ENV

      - name: Clone and build HDF5
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/HDFGroup/hdf5.git
          cd hdf5
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=$HOME/hdf5-install \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TESTING=OFF \
            -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=android-${ANDROID_API_LEVEL} \
            -GNinja
          ninja install

      - name: Cache OpenCV
        uses: actions/cache@v3
        with:
          path: /home/runner/opencv-install
          key: opencv-${{ runner.os }}-v1
          restore-keys: |
            opencv-${{ runner.os }}-v1

      - name: Clone and build OpenCV
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/opencv/opencv.git
          git clone --depth 1 https://github.com/opencv/opencv_contrib.git
          cd opencv
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$HOME/opencv-install \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TESTS=OFF \
            -DBUILD_PERF_TESTS=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_opencv_python=OFF \
            -DWITH_OPENMP=ON \
            -DWITH_TBB=ON \
            -DWITH_IPP=ON \
            -DWITH_OPENCL=OFF \
            -DOPENCV_GENERATE_PKGCONFIG=ON \
            -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
            -DOPENCV_ENABLE_NONFREE=ON \
            -DBUILD_opencv_wechat_qrcode=OFF \
            -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=android-${ANDROID_API_LEVEL} \
            -GNinja
          ninja install

      - name: Cache OpenBLAS
        uses: actions/cache@v3
        with:
          path: /home/runner/openblas-install
          key: openblas-${{ runner.os }}-v1
          restore-keys: |
            openblas-${{ runner.os }}-v1

      - name: Build OpenBLAS + FAISS (combined script)
        env:
          SDK_ROOT: ${{ env.SDK_ROOT }}
          NDK_ROOT: ${{ env.NDK_ROOT }}
          CMAKE_BIN: ${{ env.CMAKE_BIN }}
          NINJA_BIN: ${{ env.NINJA_BIN }}
          ANDROID_ABI: ${{ env.ANDROID_ABI }}
          ANDROID_API_LEVEL: ${{ env.ANDROID_API_LEVEL }}
        run: |
          set -euo pipefail
          cd $HOME

          # write the build script (adapted for CI)
          cat > build_faiss_openblas_android.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
# CI-focused build script: build OpenBLAS static and FAISS (shared) for one ABI, install into $HOME/openblas-install and $HOME/faiss-install
SDK_ROOT="${SDK_ROOT:-$HOME/android-sdk}"
NDK_ROOT="${NDK_ROOT:-$SDK_ROOT/ndk/24.0.8215888}"
CMAKE_BIN="${CMAKE_BIN:-$SDK_ROOT/cmake/3.18.1/bin/cmake}"
NINJA_BIN="${NINJA_BIN:-$SDK_ROOT/cmake/3.18.1/bin/ninja}"
MIN_SDK_VERSION="${ANDROID_API_LEVEL:-21}"
ANDROID_ABI="${ANDROID_ABI:-arm64-v8a}"

SRC_DIR="$HOME/faiss-openblas-src"
BUILD_DIR="$HOME/faiss-openblas-build"
OPENBLAS_TAG="v0.3.30"
FAISS_TAG="v1.7.2"

mkdir -p "$SRC_DIR" "$BUILD_DIR"
cd "$SRC_DIR"

# Clone if missing
if [ ! -d "$SRC_DIR/OpenBLAS" ]; then
  git clone --depth 1 --branch $OPENBLAS_TAG https://github.com/xianyi/OpenBLAS.git OpenBLAS
fi
if [ ! -d "$SRC_DIR/faiss" ]; then
  git clone --depth 1 --branch $FAISS_TAG https://github.com/facebookresearch/faiss.git faiss
fi

# Build OpenBLAS (static) and install to $HOME/openblas-install
mkdir -p "$BUILD_DIR/openblas"
pushd "$BUILD_DIR/openblas"
cmake "$SRC_DIR/OpenBLAS" \
  -DCMAKE_TOOLCHAIN_FILE="$NDK_ROOT/build/cmake/android.toolchain.cmake" \
  -DANDROID_ABI="$ANDROID_ABI" \
  -DANDROID_PLATFORM="android-${MIN_SDK_VERSION}" \
  -DNOFORTRAN=1 \
  -DTARGET=ARMV8 \
  -DONLY_CBLAS=1 \
  -DBUILD_TESTING=OFF \
  -DCMAKE_INSTALL_PREFIX=$HOME/openblas-install \
  -G "Ninja" -S "$SRC_DIR/OpenBLAS"
$NINJA_BIN
cmake --install . --prefix $HOME/openblas-install
popd

# Build FAISS linking the OpenBLAS static lib
mkdir -p "$BUILD_DIR/faiss"
pushd "$BUILD_DIR/faiss"
cmake "$SRC_DIR/faiss" \
  -DFAISS_ENABLE_GPU=OFF \
  -DFAISS_ENABLE_PYTHON=OFF \
  -DFAISS_ENABLE_TESTS=OFF \
  -DFAISS_ENABLE_BENCHMARKS=OFF \
  -DBUILD_TESTING=OFF \
  -DBUILD_SHARED_LIBS=ON \
  -DCMAKE_INSTALL_PREFIX=$HOME/faiss-install \
  -DCMAKE_TOOLCHAIN_FILE="$NDK_ROOT/build/cmake/android.toolchain.cmake" \
  -DANDROID_ABI="$ANDROID_ABI" \
  -DANDROID_PLATFORM="android-${MIN_SDK_VERSION}" \
  -DBLAS_LIBRARIES=$HOME/openblas-install/lib/libopenblas.a \
  -DBLAS_INCLUDE_DIR=$HOME/openblas-install/include \
  -G "Ninja" -S "$SRC_DIR/faiss"
$NINJA_BIN
cmake --install . --prefix $HOME/faiss-install
popd

# Sanity prints
echo "OpenBLAS install contents:"
ls -lah $HOME/openblas-install || true
echo "FAISS install contents:"
ls -lah $HOME/faiss-install || true

EOF

          chmod +x build_faiss_openblas_android.sh
          ./build_faiss_openblas_android.sh

      - name: Cache FAISS
        uses: actions/cache@v3
        with:
          path: /home/runner/faiss-install
          key: faiss-${{ runner.os }}-${{ hashFiles('faiss/**', '.github/workflows/android-build.yml') }}
          restore-keys: |
            faiss-${{ runner.os }}-

      - name: Verify OpenBLAS library exists (fail early if missing)
        run: |
          if [ ! -f "$HOME/openblas-install/lib/libopenblas.a" ]; then
            echo "::error file=./.github/workflows/android-build.yml::Required file $HOME/openblas-install/lib/libopenblas.a not found. OpenBLAS build/install likely failed."
            ls -al $HOME || true
            ls -al $HOME/openblas-install || true
            exit 1
          else
            echo "Found $HOME/openblas-install/lib/libopenblas.a"
          fi

      - name: Configure and build project
        run: |
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
            -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=android-${ANDROID_API_LEVEL} \
            -DOpenCV_DIR=$HOME/opencv-install/sdk/native/jni \
            -DFAISS_ROOT=$HOME/faiss-install \
            -DCMAKE_PREFIX_PATH=$HOME/hdf5-install \
            -GNinja
          ninja

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build-output
          path: build/
          
