name: Android CMake Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_NDK_VERSION: "24.0.8215888"
      ANDROID_CMAKE_VERSION: "3.18.1"
      ANDROID_API_LEVEL: "29"
      ANDROID_ABI: "arm64-v8a"
      CMAKE_BUILD_TYPE: "Release"
      OPENBLAS_TAG: "v0.3.21"
      FAISS_TAG: "v1.7.2"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk openjdk-17-jre cmake ninja-build git build-essential libtbb-dev libomp-dev unzip wget python3 nlohmann-json3-dev

      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: /home/runner/android-sdk
          key: android-sdk-${{ env.ANDROID_NDK_VERSION }}-${{ env.ANDROID_CMAKE_VERSION }}-${{ env.ANDROID_API_LEVEL }}
          restore-keys: |
            android-sdk-${{ env.ANDROID_NDK_VERSION }}-${{ env.ANDROID_CMAKE_VERSION }}-
            android-sdk-${{ env.ANDROID_NDK_VERSION }}-

      - name: Prepare Android SDK (commandline tools) and install packages
        run: |
          set -euo pipefail
          SDK_ROOT="$HOME/android-sdk"
          echo "SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "NDK_ROOT=$SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV
          echo "CMAKE_BIN=$SDK_ROOT/cmake/${{ env.ANDROID_CMAKE_VERSION }}/bin/cmake" >> $GITHUB_ENV
          echo "NINJA_BIN=$SDK_ROOT/cmake/${{ env.ANDROID_CMAKE_VERSION }}/bin/ninja" >> $GITHUB_ENV

          if [ -d "$SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}" ] && [ -d "$SDK_ROOT/cmake/${{ env.ANDROID_CMAKE_VERSION }}" ]; then
            echo "Android SDK found in cache, skipping download"
            export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          else
            echo "Android SDK not in cache, downloading..."
            mkdir -p "$SDK_ROOT"
            cd "$SDK_ROOT"
            CLI_ZIP="commandlinetools-linux_latest.zip"
            wget -q -O ${CLI_ZIP} https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
            unzip -q ${CLI_ZIP} -d "$SDK_ROOT/cmdline-tools-temp"
            mkdir -p "$SDK_ROOT/cmdline-tools/latest"
            mv "$SDK_ROOT/cmdline-tools-temp/cmdline-tools/"* "$SDK_ROOT/cmdline-tools/latest/"
            rm -rf "$SDK_ROOT/cmdline-tools-temp" ${CLI_ZIP}
            export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"
            yes | sdkmanager --sdk_root="$SDK_ROOT" --licenses >/dev/null || true
            sdkmanager --sdk_root="$SDK_ROOT" "platform-tools" "platforms;android-30" "cmake;${{ env.ANDROID_CMAKE_VERSION }}" "ndk;${{ env.ANDROID_NDK_VERSION }}" "build-tools;33.0.0"
          fi

      - name: Cache OpenCV
        uses: actions/cache@v3
        with:
          path: /home/runner/opencv-install
          key: opencv-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-${{ env.CMAKE_BUILD_TYPE }}-v2
          restore-keys: |
            opencv-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-${{ env.CMAKE_BUILD_TYPE }}-
            opencv-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-
            opencv-${{ runner.os }}-${{ env.ANDROID_ABI }}-

      - name: Clone and build OpenCV
        run: |
          set -euo pipefail
          if [ -d "$HOME/opencv-install" ] && [ -f "$HOME/opencv-install/sdk/native/jni/OpenCVConfig.cmake" ]; then
            echo "OpenCV found in cache, skipping build"
            exit 0
          fi
          git clone --depth 1 https://github.com/opencv/opencv.git
          git clone --depth 1 https://github.com/opencv/opencv_contrib.git
          cd opencv
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$HOME/opencv-install \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_TESTS=OFF \
            -DBUILD_PERF_TESTS=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_opencv_python=OFF \
            -DWITH_OPENMP=ON \
            -DWITH_TBB=ON \
            -DWITH_IPP=ON \
            -DWITH_OPENCL=OFF \
            -DOPENCV_GENERATE_PKGCONFIG=ON \
            -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
            -DOPENCV_ENABLE_NONFREE=ON \
            -DBUILD_opencv_wechat_qrcode=OFF \
            -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=android-${ANDROID_API_LEVEL} \
            -GNinja
          ninja install

      - name: Cache OpenCV immediately after build
        if: success()
        uses: actions/cache/save@v3
        with:
          path: /home/runner/opencv-install
          key: opencv-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-${{ env.CMAKE_BUILD_TYPE }}-${{ github.run_id }}

      - name: Cache SQLite3
        uses: actions/cache@v3
        with:
          path: /home/runner/sqlite3-install
          key: sqlite3-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-v2
          restore-keys: |
            sqlite3-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-
            sqlite3-${{ runner.os }}-${{ env.ANDROID_ABI }}-

      - name: Build SQLite3 for Android
        run: |
          set -euo pipefail
          cd /tmp
          wget -q https://www.sqlite.org/2024/sqlite-amalgamation-3460000.zip
          unzip -q sqlite-amalgamation-3460000.zip
          cd sqlite-amalgamation-3460000
          mkdir -p $HOME/sqlite3-install/lib $HOME/sqlite3-install/include
          $NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang \
            -c sqlite3.c \
            -o sqlite3.o \
            -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_RTREE \
            -O2 -fPIC
          $NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar rcs libsqlite3.a sqlite3.o
          cp libsqlite3.a $HOME/sqlite3-install/lib/
          cp sqlite3.h $HOME/sqlite3-install/include/
          cp sqlite3ext.h $HOME/sqlite3-install/include/
          echo "SQLite3 built and installed to $HOME/sqlite3-install"

      - name: Cache SQLite3 immediately after build
        if: success()
        uses: actions/cache/save@v3
        with:
          path: /home/runner/sqlite3-install
          key: sqlite3-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.ANDROID_API_LEVEL }}-${{ github.run_id }}

      - name: Prepare nlohmann/json for Android
        run: |
          mkdir -p $HOME/nlohmann-json-install/include
          cp -rv /usr/include/nlohmann $HOME/nlohmann-json-install/include/
          echo "Copied nlohmann directory to $HOME/nlohmann-json-install/include/"

      - name: Cache OpenBLAS and FAISS
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/faiss_openblas_work
            /home/runner/faiss-install
          key: openblas-faiss-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.OPENBLAS_TAG }}-${{ env.FAISS_TAG }}-v2
          restore-keys: |
            faiss-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.FAISS_TAG }}-
            openblas-intermediate-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.OPENBLAS_TAG }}-
            openblas-faiss-${{ runner.os }}-${{ env.ANDROID_ABI }}-${{ env.OPENBLAS_TAG }}-
            openblas-faiss-${{ runner.os }}-${{ env.ANDROID_ABI }}-

      - name: Build OpenBLAS (shared libs enabled) and record paths
        env:
          SDK_ROOT: ${{ env.SDK_ROOT }}
          NDK_ROOT: ${{ env.NDK_ROOT }}
          NINJA_BIN: ${{ env.NINJA_BIN }}
          ANDROID_ABI: ${{ env.ANDROID_ABI }}
          ANDROID_PLATFORM: ${{ env.ANDROID_API_LEVEL }}
          OPENBLAS_TAG: ${{ env.OPENBLAS_TAG }}
        run: |
          set -euo pipefail
          WORK_DIR="$HOME/faiss_openblas_work"
          BUILD_DIR="$WORK_DIR/build"
          build_subdir="$BUILD_DIR/openblas_${ANDROID_ABI}"
          SRC_DIR="$WORK_DIR/src"
          mkdir -p "$SRC_DIR" "$BUILD_DIR"
          cd "$SRC_DIR"
          if [ ! -d "$SRC_DIR/OpenBLAS" ]; then
            git clone --recursive -b "$OPENBLAS_TAG" https://github.com/xianyi/OpenBLAS.git OpenBLAS
          fi
          mkdir -p "$build_subdir"
          pushd "$build_subdir"
          "$CMAKE_BIN" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${NDK_ROOT}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_NDK=${NDK_ROOT} \
            -DANDROID_PLATFORM=android-${ANDROID_PLATFORM} \
            -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
            -DCMAKE_ANDROID_NDK=${NDK_ROOT} \
            -DCMAKE_MAKE_PROGRAM=${NINJA_BIN} \
            -DCMAKE_SYSTEM_NAME=Android \
            -DCMAKE_SYSTEM_VERSION=${ANDROID_PLATFORM} \
            -DANDROID_STL=c++_static \
            -DCMAKE_CXX_FLAGS_RELEASE="-s" \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_SHARED_LIBS=ON \
            -GNinja \
            "$SRC_DIR/OpenBLAS"
          ${NINJA_BIN}
          popd
          # find produced libs (prefer .so then .a)
          OPENBLAS_SO="$(find "$build_subdir" -type f -name "libopenblas*.so" -print -quit || true)"
          OPENBLAS_A="$(find "$build_subdir" -type f -name "libopenblas*.a" -print -quit || true)"
          mkdir -p "$WORK_DIR/installed"
          if [ -n "$OPENBLAS_SO" ]; then
            cp -v "$OPENBLAS_SO" "$WORK_DIR/installed/" || true
            echo "$WORK_DIR/installed/$(basename "$OPENBLAS_SO")" > "$WORK_DIR/openblas_shared_path.txt"
          fi
          if [ -n "$OPENBLAS_A" ]; then
            cp -v "$OPENBLAS_A" "$WORK_DIR/installed/" || true
            echo "$WORK_DIR/installed/$(basename "$OPENBLAS_A")" > "$WORK_DIR/openblas_static_path.txt"
          fi
          echo "OpenBLAS build output listed:"
          ls -la "$build_subdir" || true

      - name: Build FAISS (produce shared libs) and create minimal config
        env:
          SDK_ROOT: ${{ env.SDK_ROOT }}
          NDK_ROOT: ${{ env.NDK_ROOT }}
          NINJA_BIN: ${{ env.NINJA_BIN }}
          ANDROID_ABI: ${{ env.ANDROID_ABI }}
          ANDROID_PLATFORM: ${{ env.ANDROID_API_LEVEL }}
          FAISS_TAG: ${{ env.FAISS_TAG }}
        run: |
          set -euo pipefail
          WORK_DIR="$HOME/faiss_openblas_work"
          SRC_DIR="$WORK_DIR/src"
          BUILD_DIR="$WORK_DIR/build"
          mkdir -p "$SRC_DIR" "$BUILD_DIR"
          cd "$SRC_DIR"
          if [ ! -d "$SRC_DIR/faiss" ]; then
            git clone --recursive -b "$FAISS_TAG" https://github.com/facebookresearch/faiss.git faiss
          fi
          OPENBLAS_SHARED="$(cat $WORK_DIR/openblas_shared_path.txt 2>/dev/null || true)"
          OPENBLAS_STATIC="$(cat $WORK_DIR/openblas_static_path.txt 2>/dev/null || true)"
          # Prefer shared OpenBLAS if present
          MKL_LIBS_ARG="${OPENBLAS_SHARED:-${OPENBLAS_STATIC}}"
          abi_build_dir="$BUILD_DIR/faiss_${ANDROID_ABI}"
          mkdir -p "$abi_build_dir"
          pushd "$abi_build_dir"
          "$CMAKE_BIN" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${NDK_ROOT}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_NDK=${NDK_ROOT} \
            -DANDROID_PLATFORM=android-${ANDROID_PLATFORM} \
            -DCMAKE_ANDROID_ARCH_ABI=${ANDROID_ABI} \
            -DCMAKE_ANDROID_NDK=${NDK_ROOT} \
            -DCMAKE_MAKE_PROGRAM=${NINJA_BIN} \
            -DCMAKE_SYSTEM_NAME=Android \
            -DCMAKE_SYSTEM_VERSION=${ANDROID_PLATFORM} \
            -DANDROID_STL=c++_static \
            -DFAISS_ENABLE_GPU=OFF \
            -DFAISS_ENABLE_PYTHON=OFF \
            -DBUILD_TESTING=OFF \
            -DBUILD_SHARED_LIBS=ON \
            -DBLA_VENDOR=OpenBLAS \
            -DMKL_LIBRARIES="$MKL_LIBS_ARG" \
            -DCMAKE_CXX_FLAGS_RELEASE="-s" \
            -GNinja \
            "$SRC_DIR/faiss"
          ${NINJA_BIN}
          popd
          mkdir -p $HOME/faiss-install/lib $HOME/faiss-install/include
          # Copy produced faiss libs (shared preferred)
          find "$BUILD_DIR/faiss_${ANDROID_ABI}" -type f -name "libfaiss*.so" -exec cp -v {} $HOME/faiss-install/lib/ \; || true
          find "$BUILD_DIR/faiss_${ANDROID_ABI}" -type f -name "libfaiss*.a" -exec cp -v {} $HOME/faiss-install/lib/ \; || true
          # Also copy any openblas .so produced earlier (if present)
          if [ -f "$WORK_DIR/installed/"*openblas*.so ]; then
            cp -v "$WORK_DIR/installed/"*openblas*.so $HOME/faiss-install/lib/ || true
          fi
          # Copy headers
          cp -rv "$SRC_DIR/faiss/faiss" $HOME/faiss-install/include/ || true
          # Create minimal faissConfig.cmake (point to the .so if exists)
          mkdir -p $HOME/faiss-install/lib/cmake/faiss
          FAFILE="$(ls -1 $HOME/faiss-install/lib/libfaiss*.so 2>/dev/null | head -n1 || true)"
          if [ -n "$FAFILE" ]; then
            cat > $HOME/faiss-install/lib/cmake/faiss/faissConfig.cmake << 'EOF'
            add_library(faiss SHARED IMPORTED)
            set_target_properties(faiss PROPERTIES
              IMPORTED_LOCATION "${CMAKE_CURRENT_LIST_DIR}/../../$(notdir ${FAFILE})"
              INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../../../include"
              INTERFACE_LINK_LIBRARIES "libopenblas.so"
            )
            EOF
          else
            # fallback minimal config referencing static lib name if only .a exists
            cat > $HOME/faiss-install/lib/cmake/faiss/faissConfig.cmake << 'EOF'
            add_library(faiss UNKNOWN IMPORTED)
            set_target_properties(faiss PROPERTIES
              INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../../../include"
            )
            EOF
          fi
          echo "FAISS artifacts copied to $HOME/faiss-install"

      - name: Verify OpenBLAS library exists
        run: |
          WORK_DIR="$HOME/faiss_openblas_work"
          OPENBLAS_SO="$(cat $WORK_DIR/openblas_shared_path.txt 2>/dev/null || true)"
          OPENBLAS_A="$(cat $WORK_DIR/openblas_static_path.txt 2>/dev/null || true)"
          if [ -z "$OPENBLAS_SO" ] && [ -z "$OPENBLAS_A" ]; then
            echo "::error::Required OpenBLAS library not found in installed area"
            find "$WORK_DIR" -name "libopenblas*" -type f 2>/dev/null || true
            exit 1
          fi
          echo "OpenBLAS shared: $OPENBLAS_SO"
          echo "OpenBLAS static: $OPENBLAS_A"

      - name: Configure and build project (final)
        run: |
          echo "::group::Pre-build verification"
          ls -la $HOME/faiss-install/ || true
          ls -la $HOME/faiss-install/lib/ || true
          ls -la $HOME/sqlite3-install/ || true
          ls -la $HOME/nlohmann-json-install/include/nlohmann/ || true
          echo "::endgroup::"
          mkdir -p build && cd build
          cmake .. \
           -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
           -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
           -DANDROID_ABI=$ANDROID_ABI \
           -DANDROID_PLATFORM=android-${ANDROID_API_LEVEL} \
           -DOpenCV_DIR=$HOME/opencv-install/sdk/native/jni \
           -Dfaiss_DIR=$HOME/faiss-install/lib/cmake/faiss \
           -DFAISS_ROOT=$HOME/faiss-install \
           -DNLOHMANN_JSON_INCLUDE_DIR=$HOME/nlohmann-json-install/include \
           -DCMAKE_PREFIX_PATH="$HOME/sqlite3-install" \
           -DSQLite3_INCLUDE_DIR=$HOME/sqlite3-install/include \
           -DSQLite3_LIBRARY=$HOME/sqlite3-install/lib/libsqlite3.a \
           -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON \
           -GNinja
          ninja

      - name: Package shared libraries with executable (improved)
        run: |
          set -euo pipefail
          WORK_DIR="$HOME/faiss_openblas_work"
          PKG_DIR=build/packaged_app
          mkdir -p "$PKG_DIR"
          cd build
          # copy the built executable and library
          cp -v matcher_test "$PKG_DIR/" || echo "matcher_test not found"
          cp -v libmatcher.so "$PKG_DIR/" || echo "libmatcher.so not found"
          # Copy all OpenCV .so for ABI (conservative)
          if [ -d "$HOME/opencv-install/sdk/native/libs/${ANDROID_ABI}" ]; then
            cp -v "$HOME/opencv-install/sdk/native/libs/${ANDROID_ABI}"/*.so "$PKG_DIR/" || true
          fi
          # Copy faiss and openblas .so files
          if [ -d "$HOME/faiss-install/lib" ]; then
            cp -v "$HOME/faiss-install/lib/"*.so "$PKG_DIR/" 2>/dev/null || true
          fi
          # Copy sqlite .so if exists (won't if statically linked)
          if [ -d "$HOME/sqlite3-install/lib" ]; then
            cp -v "$HOME/sqlite3-install/lib/"*.so "$PKG_DIR/" 2>/dev/null || true
          fi

          # Determine DT_NEEDED for matcher_test and libmatcher.so using NDK readelf and copy matching libs from known locations
          READELF="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-readelf"
          NEEDS_LIST="$(for f in "$PKG_DIR/matcher_test" "$PKG_DIR/libmatcher.so"; do
            if [ -f "$f" ]; then
              $READELF -d "$f" 2>/dev/null | awk -F'[][]' '/NEEDED/{print $2}'
            fi
          done | sort -u)"
          echo "Needed shared libs found in binaries:"
          echo "$NEEDS_LIST"
          # Search and copy each needed .so from typical locations (faiss-install, opencv-install, work build, home)
          for libname in $NEEDS_LIST; do
            # skip if already present
            if [ -f "$PKG_DIR/$libname" ]; then
              echo "$libname already present"
              continue
            fi
            # try to locate
            found="$(find "$HOME/faiss-install" "$HOME/opencv-install" "$WORK_DIR" "$HOME/sqlite3-install" -type f -name "$libname" 2>/dev/null | head -n1 || true)"
            if [ -n "$found" ]; then
              echo "Copying $found -> $PKG_DIR"
              cp -v "$found" "$PKG_DIR/"
            else
              echo "::warning::Could not locate $libname in known install/build trees"
            fi
          done

          # As an extra safety net, copy any .so under faiss-install/opencv-install/openblas build
          for d in "$HOME/faiss-install/lib" "$HOME/opencv-install/sdk/native/libs/${ANDROID_ABI}" "$WORK_DIR/installed" "$WORK_DIR/build/openblas_${ANDROID_ABI}/lib"; do
            if [ -d "$d" ]; then
              cp -vn "$d"/*.so "$PKG_DIR/" 2>/dev/null || true
            fi
          done

          # Create a run wrapper that sets LD_LIBRARY_PATH to this folder and runs
          cat > "$PKG_DIR/run.sh" <<'EOF'
          #!/bin/sh
          DIR="$(cd "$(dirname "$0")" && pwd)"
          export LD_LIBRARY_PATH="$DIR:$LD_LIBRARY_PATH"
          exec "$DIR/matcher_test" "$@"
          EOF
          chmod +x "$PKG_DIR/run.sh"

          echo "::group::Packaged files"
          ls -la "$PKG_DIR"
          echo "::endgroup::"

      - name: Find and list all shared libraries
        run: |
          echo "::group::Finding shared libraries"
          find build -name "*.so" -type f | sort
          echo "::endgroup::"
          echo "::group::OpenCV libraries"
          find $HOME/opencv-install -name "*.so" -type f 2>/dev/null | sort || echo "No OpenCV .so files found"
          echo "::endgroup::"
          echo "::group::Other dependency locations"
          find $HOME/faiss-install -type f 2>/dev/null | head -40 || true
          find $HOME/sqlite3-install -type f 2>/dev/null | head -20 || true
          echo "::endgroup::"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build-output
          path: |
            build/
            build/**/*.so
            build/packaged_app/**
            ${{ env.HOME }}/opencv-install/sdk/native/libs/${{ env.ANDROID_ABI }}/*.so
            ${{ env.HOME }}/faiss-install/lib/*.so
            matcher.cpp
            matcher.h
            main.cpp
            *.so
